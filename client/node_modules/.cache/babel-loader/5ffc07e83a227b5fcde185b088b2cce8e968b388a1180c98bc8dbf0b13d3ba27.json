{"ast":null,"code":"var _jsxFileName = \"D:\\\\DivyaSree_Data\\\\visualization-dashboard\\\\client\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { getData } from \"../service/api\";\nimport { Chart } from \"react-google-charts\";\nimport { Table, TableHead, TableBody, TableRow, TableCell, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [data, setData] = useState([]);\n  const [chartData, setChartData] = useState([['country', 'intensity', \"likelihood\", \"relevance\"]]);\n  const [chartInfo, setChartInfo] = useState([]);\n  // const [chartData, setChartData] = useState({});\n  // const [chartOptions, setChartOptions] = useState({})\n\n  const inValue = [6, 6, 6, 6, 6, 6, 60, 16, 16, 6];\n  const titles = ['United States of America', 'United States of America', 'United States of America', 'Mexico', '', '', '', '', 'Nigeria', 'Lebanon'];\n  const info = {\n    \"chartType\": \"ColumnChart\",\n    \"chart\": [[\"country\", \"intensity\", \"likelihood\", \"relevance\"], [\"United States of America\", 6, 10, 3], [\"United States of America\", 6, 11, 4], [\"Mexico\", 6, 12, 5], [\"Nigeria\", 60, 13, 6], [\"Lebanon\", 6, 14, 7]],\n    \"options\": {\n      \"title\": \"Intensity\"\n    },\n    \"width\": \"100%\",\n    \"height\": \"400px\"\n  };\n  // const chartData = {\n  //   labels: titles,\n  //   datasets: [\n  //     {\n  //       label: 'Intensity',\n  //       data: inValue,\n  //       backgroundColor: 'rgba(75, 192, 192, 0.2)', // Customize the color as needed\n  //       borderColor: 'rgba(75, 192, 192, 1)', // Customize the color as needed\n  //       borderWidth: 1,\n  //     },\n  //   ],\n  // };\n\n  // const chartOptions = {\n  //   scales: {\n  //     y: {\n  //       beginAtZero: true,\n  //       title: {\n  //         display: true,\n  //         text: 'Intensity',\n  //       },\n  //     },\n  //     x: {\n  //       title: {\n  //         display: true,\n  //         text: 'Title',\n  //       },\n  //     },\n  //   },\n  // }\n\n  const getDetails = async () => {\n    try {\n      const response = await getData();\n      console.log(response, \"response from server\");\n      setData(response === null || response === void 0 ? void 0 : response.data);\n    } catch (err) {\n      console.log(err, \"err in api\");\n    }\n  };\n  useEffect(() => {\n    getDetails();\n  }, []);\n  useEffect(() => {\n    data === null || data === void 0 ? void 0 : data.slice(0, 4).forEach(item => {\n      const {\n        intensity,\n        likelihood,\n        relevance,\n        country\n      } = item;\n      chartData.push([country, intensity, likelihood, relevance]);\n      setChartData(...chartData);\n      setChartInfo(...chartData);\n    });\n  }, [data]);\n  useEffect(() => {\n    console.log(chartData, \"chart data\");\n    console.log(chartInfo, \"info chart\");\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"Intensity Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), data ? /*#__PURE__*/_jsxDEV(Chart, {\n        width: '80%',\n        height: '300px',\n        chartType: \"ColumnChart\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this),\n        data: info.chart,\n        options: {\n          title: 'Intensity Chart',\n          hAxis: {\n            title: 'Country'\n          },\n          vAxis: {\n            title: 'Value'\n          },\n          seriesType: \"bars\"\n          // series: {\n          //     1: { axis: 'CategoryAxis' },\n          //   },\n          //   axes: {\n          //     y: {\n          //       CategoryAxis: {\n          //         // Customize the options for the secondary category axis here\n          //         textStyle: {\n          //           fontSize: 12, // Adjust the font size\n          //         },\n          //         titleTextStyle: {\n          //           fontSize: 14, // Adjust the title font size\n          //           color: 'red', // Change the title color\n          //         },\n          //         gridlines: {\n          //           color: 'lightgray', // Change the gridlines color\n          //           count: 5, // Adjust the number of gridlines\n          //         },\n          //         // Add any other customizations you need\n          //       },\n          //     },\n          //   },\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 20\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"3GWhvt935eSUXSA1WiVI7rBx7Ng=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","useRef","getData","Chart","Table","TableHead","TableBody","TableRow","TableCell","Typography","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","data","setData","chartData","setChartData","chartInfo","setChartInfo","inValue","titles","info","getDetails","response","console","log","err","slice","forEach","item","intensity","likelihood","relevance","country","push","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","width","height","chartType","loader","chart","options","title","hAxis","vAxis","seriesType","_c","$RefreshReg$"],"sources":["D:/DivyaSree_Data/visualization-dashboard/client/src/components/dashboard.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { getData } from \"../service/api\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport {Table, TableHead, TableBody, TableRow, TableCell, Typography } from \"@mui/material\";\r\n\r\nfunction Dashboard() {\r\n    const [data, setData] = useState([]);\r\n    const [chartData,setChartData] = useState([['country', 'intensity',\"likelihood\",\"relevance\"]]);\r\n    const [chartInfo, setChartInfo] = useState([]);\r\n    // const [chartData, setChartData] = useState({});\r\n    // const [chartOptions, setChartOptions] = useState({})\r\n\r\n        const inValue = [6, 6, 6, 6, 6, 6, 60, 16, 16, 6];\r\n        const titles = ['United States of America', 'United States of America', 'United States of America', 'Mexico', '', '', '', '', 'Nigeria', 'Lebanon'];\r\n        const info = {\r\n            \"chartType\":\"ColumnChart\",\r\n            \"chart\": [\r\n            [\"country\",\"intensity\",\"likelihood\",\"relevance\"],\r\n            [\"United States of America\",6,10,3],\r\n            [\"United States of America\",6,11,4],\r\n            [\"Mexico\",6,12,5],\r\n            [\"Nigeria\",60,13,6],\r\n            [\"Lebanon\",6,14,7],\r\n        ],\r\n        \"options\": {\r\n            \"title\":\"Intensity\"\r\n        },\r\n        \"width\": \"100%\",\r\n        \"height\": \"400px\"\r\n    }\r\n        // const chartData = {\r\n        //   labels: titles,\r\n        //   datasets: [\r\n        //     {\r\n        //       label: 'Intensity',\r\n        //       data: inValue,\r\n        //       backgroundColor: 'rgba(75, 192, 192, 0.2)', // Customize the color as needed\r\n        //       borderColor: 'rgba(75, 192, 192, 1)', // Customize the color as needed\r\n        //       borderWidth: 1,\r\n        //     },\r\n        //   ],\r\n        // };\r\n      \r\n        // const chartOptions = {\r\n        //   scales: {\r\n        //     y: {\r\n        //       beginAtZero: true,\r\n        //       title: {\r\n        //         display: true,\r\n        //         text: 'Intensity',\r\n        //       },\r\n        //     },\r\n        //     x: {\r\n        //       title: {\r\n        //         display: true,\r\n        //         text: 'Title',\r\n        //       },\r\n        //     },\r\n        //   },\r\n        // }\r\n\r\n    \r\n    const getDetails = async() => {\r\n        try {\r\n        const response = await getData();\r\n        console.log(response,\"response from server\")\r\n         setData(response?.data);\r\n    }\r\n    catch(err) {\r\n      console.log(err,\"err in api\")\r\n    }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDetails()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      data?.slice(0,4).forEach((item) => {\r\n        const {intensity, likelihood,relevance,country} = item;\r\n        chartData.push([country, intensity,likelihood,relevance]);\r\n        setChartData(...chartData)\r\n        setChartInfo(...chartData)\r\n      })\r\n    },[data])\r\n\r\n    useEffect(()=> {\r\n       console.log(chartData,\"chart data\")\r\n       console.log(chartInfo,\"info chart\")\r\n    },[chartData])\r\n\r\n    return(\r\n        <div>\r\n            <Typography variant=\"h5\">Intensity Chart</Typography>\r\n            <div>\r\n                {/* <Chart data = {chartData} chartType=\"ColumnChart\"/> */}\r\n                <div>{chartData}</div>\r\n            {data? <Chart\r\n                width={'80%'}\r\n                height={'300px'}\r\n                chartType=\"ColumnChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={info.chart}\r\n                options={{\r\n                    title: 'Intensity Chart',\r\n                    hAxis: { title: 'Country',},\r\n                    vAxis: {title: 'Value'},\r\n                    seriesType :\"bars\",\r\n                    // series: {\r\n                    //     1: { axis: 'CategoryAxis' },\r\n                    //   },\r\n                    //   axes: {\r\n                    //     y: {\r\n                    //       CategoryAxis: {\r\n                    //         // Customize the options for the secondary category axis here\r\n                    //         textStyle: {\r\n                    //           fontSize: 12, // Adjust the font size\r\n                    //         },\r\n                    //         titleTextStyle: {\r\n                    //           fontSize: 14, // Adjust the title font size\r\n                    //           color: 'red', // Change the title color\r\n                    //         },\r\n                    //         gridlines: {\r\n                    //           color: 'lightgray', // Change the gridlines color\r\n                    //           count: 5, // Adjust the number of gridlines\r\n                    //         },\r\n                    //         // Add any other customizations you need\r\n                    //       },\r\n                    //     },\r\n                    //   },\r\n                    }}\r\n                  />: <></> }\r\n          </div>\r\n            {/* <Table>\r\n              <TableHead>\r\n                 <TableRow>\r\n                    <TableCell>Intensity</TableCell>\r\n                    <TableCell>Likelihood</TableCell>\r\n                    <TableCell>Relevance</TableCell>\r\n                    <TableCell>Year</TableCell>\r\n                    <TableCell>Country</TableCell>\r\n                    <TableCell>Topics</TableCell>\r\n                    <TableCell>Region</TableCell>\r\n                    <TableCell>City</TableCell>\r\n                 </TableRow>\r\n              </TableHead>\r\n            </Table> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}